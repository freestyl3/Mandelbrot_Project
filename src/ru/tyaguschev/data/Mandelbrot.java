package ru.tyaguschev.data;

/**
 * Класс Mandelbrot предоставляет методы для вычисления множества Мандельброта.
 *
 * Множество Мандельброта определяется как множество комплексных чисел, для которых
 * последовательность \( z_{n+1} = z_n^2 + c \), начиная с \( z_0 = 0 \), остается ограниченной.
 */
public class Mandelbrot {

    /**
     * Максимальное количество итераций для вычисления точки.
     * Чем выше значение, тем точнее будет результат, но больше будет затрачено времени.
     */
    private int maxIterations = 2000;

    /**
     * Проверяет, принадлежит ли заданное комплексное число множеству Мандельброта.
     *
     * @param complex комплексное число \( c \), для которого проверяется принадлежность
     * @return нормализованное значение от 0 до 1, где 1 означает, что число
     *         остается в пределах множества, а значения ближе к 0 указывают на быстрое расхождение
     */
    public double isInSet(ComplexNumber complex) {
        ComplexNumber z = new ComplexNumber.Base(); // Начальное значение \( z_0 = 0 \)
        int i = 0;
        double r2 = 4.0; // Радиус расхождения (обычно 2, но квадрат радиуса используется для оптимизации)

        // Итеративный процесс проверки расхождения
        while (z.abs2() < r2 && i < maxIterations) {
            z = z.times(z).plus(complex);
            i++;
        }

        // Возвращает нормализованное значение, показывающее относительное количество итераций
        return (double) i / maxIterations;
    }

    /**
     * Устанавливает максимальное количество итераций.
     *
     * @param iters новое значение для максимального количества итераций
     */
    public void setMaxIterations(int iters) {
        this.maxIterations = iters;
    }

    /**
     * Возвращает текущее максимальное количество итераций.
     *
     * @return максимальное количество итераций
     */
    public int getMaxIterations() {
        return this.maxIterations;
    }
}
